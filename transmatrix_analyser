#!/usr/bin/python
# -*- coding: iso-8859-15 -*-
"""
/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <mbesdeberc@unistra.fr> wrote this file. As long as you retain this notice 
 * you can do whatever you want with this stuff. If we meet some day, and you 
 * think this stuff is worth it, you can buy me a beer in return. 
 * M. Bes de Berc
 * ----------------------------------------------------------------------------
 */
 Usage: 
    transmatrix_analyser arclink <start> <end> <stream> [-S <server>] [-P <port>] \
[--ref-stream <ref-stream>] [--fmin=<fmin>] [--fmax=<fmax>]

Example:
    ./transmatrix_analyser arclink 2016-09-30T00:00:00 2016-10-01T00:00:00 \
XX.GPIL.10.HH? -S renass-fw -P 18001 --fmin=0.1 --fmax=10 

Options:
    -h --help           Show this screen.
    --version           Show version.
    <start>             Start time in obspy.core.UTCDateTime format.
    <end>               End time in obspy.core.UTCDateTime format.
    <stream>            Stream to analyse in seed code separated by dots. \
(Ex: XX.GPIL.00.HH?).
    -S <server>         Set address of arclink server [default: renass-fw].
    -P <port>           Set port of arclink server [default: 18115]. 
    --ref-stream <ref-stream>   Set reference stream [default: FR.STR.00.HH?].
    --fmin=<fmin>       Set minimum frequency for bandpass filter [default: 0.1].
    --fmax=<fmax>       Set maximum frequency for bandpass filter [default: 10].
"""

from docopt import docopt
from obspy.clients.arclink import Client
from obspy.core import UTCDateTime
from pyColocSensors import transMatrix
import numpy as np

if __name__ == '__main__':
    args=docopt(__doc__, version='repimp_analyser 1.1')
    #Uncomment for debug
    #print(args)

    if args['arclink']:
        data=Client(host=args['-S'],port=args['-P'],\
        user='mbesdeberc@unistra.fr')
        t1=UTCDateTime(args['<start>'])
        t2=UTCDateTime(args['<end>'])
        code=args['<stream>'].split('.')
        st=data.get_waveforms(code[0],code[1],code[2],code[3],t1,t2,route=False)
    
    st.sort()    
    print(st)
    st.plot()
    
    code_ref=args['--ref-stream'].split('.')
    st_ref=data.get_waveforms(code_ref[0],code_ref[1],code_ref[2],code_ref[3],t1,t2,route=False)
    st_ref.sort()
    for tr in st_ref:
        try:
            paz_ref=data.get_paz(code_ref[0],code_ref[1],code_ref[2],tr.stats.channel,t1,route=False)
            tr.data=tr.data*1./paz_ref['sensitivity']
        except:
            pass
    
    t_mat=transMatrix(st,st_ref)
    print(t_mat)
    alpha=np.arctan(t_mat[1][0]/t_mat[0][0])
    print("Orientation error: "+str(alpha*180/np.pi)+" degrees")
    print(st[0].id+ " gain: "+str(t_mat[0][0]/np.cos(alpha)))
    print(st[1].id+ " gain: "+str(t_mat[1][1]/np.cos(alpha)))
    print(st[2].id+ " gain: "+str(t_mat[2][2]/np.cos(alpha)))