#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
:author:
    Maxime Bès de Berc (mbesdeberc@unistra.fr)

:copyright:
    Maxime Bès de Berc (mbesdeberc@unistra.fr)

:license:
    The Beerware License
    (https://tldrlegal.com/license/beerware-license)

 Usage:
    transmatrix_analyser arclink <start> <end> <stream> [-S <server>]
    [-P <port>] [-U <user>] [--ref-stream=<ref-stream>] [--fmin=<fmin>]
    [--fmax=<fmax>]

Example:
    ./transmatrix_analyser arclink 2016-09-30T00:00:00 2016-09-30T05:00:00 \
XX.GPIL.00.HH? -S renass-fw -P 18001 --fmin=0.1 --fmax=10

Options:
    -h --help           Show this screen.
    --version           Show version.
    <start>             Start time in obspy.core.UTCDateTime format.
    <end>               End time in obspy.core.UTCDateTime format.
    <stream>            Stream to analyse in seed code separated by dots. \
(Ex: XX.GPIL.00.HH?).
    -S <server>         Set address of arclink server [default: renass-fw].
    -P <port>           Set port of arclink server [default: 18115].
    -U <user>           Set user for connecting to arclink server \
[default: pfi@unistra.fr].
    --ref-stream=<ref-stream>   Set reference stream [default: FR.STR.00.HH?].
    --fmin=<fmin>       Set minimum frequency for bandpass filter \
[default: 0.125].
    --fmax=<fmax>       Set maximum frequency for bandpass filter \
[default: 0.5].
"""

from docopt import docopt
from obspy.clients.arclink import Client
from obspy.core import UTCDateTime
from pyColocSensors import transMatrix
import numpy as np

if __name__ == '__main__':
    args = docopt(__doc__, version='transmatrix_analyser 1.0')
    # Uncomment for debug
    # print(args)

    if args['arclink']:
        data = Client(host=args['-S'], port=args['-P'],
                      user=args['-U'])
        t1 = UTCDateTime(args['<start>'])
        t2 = UTCDateTime(args['<end>'])
        code = args['<stream>'].split('.')
        st = data.get_waveforms(code[0], code[1], code[2], code[3], t1, t2,
                                route=False)

        code_ref = args['--ref-stream'].split('.')
        st_ref = data.get_waveforms(code_ref[0], code_ref[1], code_ref[2],
                                    code_ref[3], t1, t2, route=False)
        st.merge()
        st_ref.merge()

    st.sort()
    st_ref.sort()
    print((st + st_ref))
    (st + st_ref).plot(equal_scale=False)

    for tr in st_ref:
        try:
            paz_ref = data.get_paz(code_ref[0], code_ref[1], code_ref[2],
                                   tr.stats.channel, t1, route=False)
            tr.data = tr.data*1./paz_ref['sensitivity']
        except:
            pass

    t_mat = transMatrix(st, st_ref, fmin=float(args['--fmin']),
                        fmax=float(args['--fmax']))
    print("Rotation matrix between streams:")
    print(t_mat)
    if args['--ref-stream'] == args['<stream>']:
        print("Orthogonality/diaphony error in dB:")
        print(20*np.log10(np.absolute(t_mat)))
        print("Orthogonality/diaphony error in degrees:")
        print(np.arcsin(t_mat*180/np.pi))
    else:
        alpha1 = np.arctan2(t_mat[1][0], t_mat[0][0])
        alpha2 = np.arctan2(-1*t_mat[0][1], t_mat[1][1])
        alpha = np.mean([alpha1, alpha2])
        print("    Orientation error: %.2f deg, Standard deviation: %.2f deg"
              % (alpha*180/np.pi, np.std(np.array([alpha1, alpha2])*180/np.pi))
              )
        print("    %s gain: %.0f" % (st[0].id, t_mat[0][0]/np.cos(alpha)))
        print("    %s gain: %.0f" % (st[1].id, t_mat[1][1]/np.cos(alpha)))
        print("    %s gain: %.0f" % (st[2].id, t_mat[2][2]))
