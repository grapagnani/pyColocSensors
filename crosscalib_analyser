#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
:author:
    Maxime Bès de Berc (mbesdeberc@unistra.fr)

:copyright:
    Maxime Bès de Berc (mbesdeberc@unistra.fr)

:license:
    The Beerware License
    (https://tldrlegal.com/license/beerware-license)

 Usage:
    crosscalib_analyser arclink <start> <end> <stream> [-S <server>] \
[-P <port>] [--ref-stream=<ref-stream>] [--sensitivity=<sens>] \
[--period=<per>] [--damping=<damp>] [--unit=<unit>] [--win-len=<wlen>] \
[--smooth=<smooth>]

Example:
    ./crosscalib_analyser arclink 2016-12-26T00:00:00 2017-01-01T00:00:00 \
XX.GP000.00.HHZ --ref-stream=XX.GPIL.00.HHZ -S renass-fw -P 18001

Options:
    -h --help           Show this screen.
    --version           Show version.
    <start>             Start time in obspy.core.UTCDateTime format.
    <end>               End time in obspy.core.UTCDateTime format.
    <stream>            Stream to analyse in seed code separated by dots. \
(Ex: XX.GPIL.00.HHZ).
    -S <server>         Set address of arclink server [default: renass-fw].
    -P <port>           Set port of arclink server [default: 18115].
    --ref-stream <ref-stream>   Set reference stream [default: FR.STR.00.HHZ].
    --sensitivity=<sens>   Specify overall sensitivity [default: 6.29145e8].
    --period=<per>      Specify expected period [default: 120].
    --damping=<damp>    Specify expected damping [default: 0.707].
    --unit=<unit>       Specify output unit [default: M/S].
    --win-len=<wlen>    Specify slicing window length in seconds [default: 360].
    --smooth=<smooth>   Specify smooth coefficient [default: 0].
"""

from docopt import docopt
from obspy.clients.arclink import Client
from obspy.core import UTCDateTime
from obspy.signal.calibration import rel_calib_stack
from obspy.signal.invsim import corn_freq_2_paz
import numpy as np
from matplotlib import pyplot


def make_paz(_period, _damping, _sensitivity, _unit):
    paz = corn_freq_2_paz(1./_period, damp=_damping)
    paz['sensitivity'] = _sensitivity
    paz['sensitivity_unit'] = _unit
    return paz


if __name__ == '__main__':
    args = docopt(__doc__, version='crosscalib_analyser 1.0')
    # Uncomment for debug
    print(args)

    if args['arclink']:
        data = Client(host=args['-S'], port=args['-P'],
                      user='pfi@unistra.fr')
        t1 = UTCDateTime(args['<start>'])
        t2 = UTCDateTime(args['<end>'])
        code = args['<stream>'].split('.')
        st = data.get_waveforms(code[0], code[1], code[2], code[3], t1, t2,
                                route=False)


    code_ref = args['--ref-stream'].split('.')
    st_ref = data.get_waveforms(code_ref[0], code_ref[1], code_ref[2],
                                code_ref[3], t1, t2, route=False)

    if len(st) != 1 or len(st_ref) != 1:
         print("[Error]: Stream does not contain one single trace")

    if st[0].stats.sampling_rate != st_ref[0].stats.sampling_rate:
        print("[Error]: Sampling rates are not identical between traces")

    if st[0].stats.npts != st_ref[0].stats.npts:
        print("[Error]: Traces does not have the same length")

    if st[0].stats.starttime-st_ref[0].stats.starttime >= st_ref[0].stats.sampling_rate/2:
        print("[Error] Traces does not have the same start time")


    print((st+st_ref))
    (st+st_ref).plot(equal_scale=False)

    try:
        paz_ref = data.get_paz(code_ref[0], code_ref[1], code_ref[2],
                                   tr.stats.channel, t1, route=False)
    except:
        paz_ref = make_paz(int(args['--period']),
                               float(args['--damping']),
                               float(args['--sensitivity']),
                               args['--unit'])

    while st[0].stats.sampling_rate > 20:
        st.decimate(10)
        st_ref.decimate(10)

    freq, amp, phase = rel_calib_stack(st, st_ref, paz_ref, int(args['--win-len']), smooth=int(args['--smooth']), overlap_frac=0.75, save_data=False)

    pyplot.subplot(211)
    pyplot.semilogx(freq, 20*np.log10(amp))
    pyplot.grid()
    pyplot.ylabel("Amplitude (dB rel to 1 m*s**-1)")
    pyplot.subplot(212)
    pyplot.semilogx(freq, phase*180./np.pi)
    pyplot.grid()
    pyplot.ylabel("Phase (deg)")
    pyplot.xlabel("Frequency (Hz)")
    pyplot.suptitle("%s tranfer function" % (st[0].id))
    pyplot.show()


