#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
:author:
    Maxime Bès de Berc (mbesdeberc@unistra.fr)

:copyright:
    Maxime Bès de Berc (mbesdeberc@unistra.fr)

:license:
    The Beerware License
    (https://tldrlegal.com/license/beerware-license)

 Usage:
    transmatrix_analyser arclink <start> <end> <stream> [-S <server>]
    [-P <port>] [--ref-stream <ref-stream>] [--fmin=<fmin>] [--fmax=<fmax>]

Example:
    ./transmatrix_analyser arclink 2016-09-30T00:00:00 2016-10-01T00:00:00 \
XX.GPIL.00.HHZ -S renass-fw -P 18001

Options:
    -h --help           Show this screen.
    --version           Show version.
    <start>             Start time in obspy.core.UTCDateTime format.
    <end>               End time in obspy.core.UTCDateTime format.
    <stream>            Stream to analyse in seed code separated by dots. \
(Ex: XX.GPIL.00.HH?).
    -S <server>         Set address of arclink server [default: renass-fw].
    -P <port>           Set port of arclink server [default: 18115].
    --ref-stream <ref-stream>   Set reference stream [default: FR.STR.00.HHZ].
"""

from docopt import docopt
from obspy.clients.arclink import Client
from obspy.core import UTCDateTime
from obspy.signal.calibration import rel_calib_stack 
from pyColocSensors import transMatrix
import numpy as np

if __name__ == '__main__':
    args = docopt(__doc__, version='repimp_analyser 1.1')
    # Uncomment for debug
    # print(args)

    if args['arclink']:
        data = Client(host=args['-S'], port=args['-P'],
                      user='pfi@unistra.fr')
        t1 = UTCDateTime(args['<start>'])
        t2 = UTCDateTime(args['<end>'])
        code = args['<stream>'].split('.')
        st = data.get_waveforms(code[0], code[1], code[2], code[3], t1, t2,
                                route=False)

    st.sort()
    print(st)
    st.plot()

    code_ref = args['--ref-stream'].split('.')
    st_ref = data.get_waveforms(code_ref[0], code_ref[1], code_ref[2],
                                code_ref[3], t1, t2, route=False)
    st_ref.sort()
    try:
        paz_ref = data.get_paz(code_ref[0], code_ref[1], code_ref[2],
                                   tr.stats.channel, t1, route=False)
    except:
        paz_ref = dict()
	paz_ref['zeros'] = [0+0j, 0-0j]
	paz_ref['poles'] = [-0.03852+0.03658j, -0.03852-0.03658j]
	paz_ref['sensitivity'] = 419430*1201

    freq, amp, phase = rel_calib_stack(st, st_ref, paz_ref, 20, smooth=10, save_data=False)

    print(amp)

